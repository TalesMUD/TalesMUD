{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Credits.svelte",
    "../UserForm.svelte",
    "../UserMenu.svelte",
    "../Welcome.svelte",
    "../CharacterCreator.svelte",
    "../CharacterScore.svelte",
    "../CharacterTemplate.svelte",
    "../ActionEditor.svelte",
    "../CRUDEditor.svelte",
    "../ExitEditor.svelte",
    "../Toolbar.svelte",
    "../Game.svelte",
    "../Sprites.svelte"
  ],
  "sourcesContent": [
    "<style>\n  :global(body) {\n    background-color: #263238;\n    color: #d8dee9;\n    transition: background-color 0.3s;\n    margin: 0 auto;\n    padding: 0px;\n\n    /* The image used */\n    /*background-image: url(\"bg.jpg\");*/\n    /* Full height */\n    height: 100%;\n    /* Center and scale the image nicely */\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    text-decoration: none;\n    text-decoration-line: none;\n  }\n  :global(a:href) {\n    text-decoration: none;\n  }\n  :global(label) {\n    color: #00796b;\n  }\n  :global(a) {\n    color: #dedede;\n\n    text-decoration: none;\n  }\n  :global(a:hover) {\n    text-decoration: none;\n  }\n  .brand-logo {\n    margin-left: 0em;\n    margin-right: 1em;\n  }\n  .iconspacing {\n    margin-right: 0.5em;\n  }\n\n  :global(a:visited) {\n    text-decoration: none;\n    text-decoration-line: none;\n    color: #aaa;\n  }\n  nav {\n    background: #00000055;\n  }\n  nav {\n    margin-bottom: 2em;\n  }\n  .mobile {\n    font-size: 10px;\n  }\n  img {\n    height: 40px;\n  }\n</style>\n\n<script>\n\timport Sprites from './game/Sprites.svelte';\n  import AppContent from \"./AppContent.svelte\";\n  import MediaQuery from \"./MediaQuery.svelte\";\n\n  import {\n    HashIcon,\n    ShieldIcon,\n    BookOpenIcon,\n    EditIcon,\n    PlayIcon,\n    UsersIcon,\n  } from \"svelte-feather-icons\";\n  import { Router, Link, Route, navigate } from \"svelte-routing\";\n\n  import Game from \"./game/Game.svelte\";\n  import Welcome from \"./Welcome.svelte\";\n  import Creator from \"./creator/Creator.svelte\";\n  import Characters from \"./characters/Characters.svelte\";\n  import UserForm from \"./UserForm.svelte\";\n  import { afterUpdate, onMount } from \"svelte\";\n  import NavLink from \"./components/NavLink.svelte\";\n\n  import { user, subMenu } from \"./stores.js\";\n  import { fade } from \"svelte/transition\";\n\n  import UserMenu from \"./UserMenu.svelte\";\n  import { createAuth } from \"./auth.js\";\n\n  // Auth0 config\n  const config = {\n    domain: \"owndnd.eu.auth0.com\",\n    client_id: \"mxcEqTuAUOzrL798mbVTpqFxpGGVp3gI\",\n    audience: \"http://talesofapirate.com/dnd/api\",\n  };\n\n  const { isAuthenticated, authToken } = createAuth(config);\n  $: state = {\n    isAuthenticated: $isAuthenticated,\n    authToken: $authToken.slice(0, 20),\n  };\n\n  String.prototype.capitalize = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n  };\n\n  onMount(async () => {\n    //var elems = document.querySelectorAll(\".tabs\");\n    //let instance = M.Tabs.init(elems);\n  });\n  export let url = \"\";\n</script>\n\n<svelte:head>\n  <script src=\"https://cdn.auth0.com/js/auth0/9.0/auth0.min.js\">\n\n  </script>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\"\n  />\n  <script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js\">\n\n  </script>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n  />\n\n</svelte:head>\n\n<div class=\"root default\">\n\n  <Router url=\"{url}\">\n    <nav class=\"nav-extended\">\n      <div class=\"nav-wrapper container\">\n        <a href=\"#\" class=\"brand-logo\">\n          <span class=\"valign-wrapper italic\">\n            <span class=\"iconspacing\">\n            \n               <BookOpenIcon size=\"24\" />\n           </span>\n            <NavLink to=\"/\">Tales</NavLink>\n          </span>\n        </a>\n\n        <ul class=\"right hide-on-small-only\">\n\n          <li>\n            <NavLink to=\"/play\">\n              <span class=\"valign-wrapper\">\n                <span class=\"iconspacing valign-wrapper\">\n                  <PlayIcon size=\"18\" />\n                </span>\n                Play\n              </span>\n            </NavLink>\n\n          </li>\n          {#if $isAuthenticated}\n            <li>\n              <NavLink to=\"/list\">\n                <span class=\"valign-wrapper\">\n                  <span class=\"iconspacing valign-wrapper\">\n                    <UsersIcon size=\"18\" />\n                  </span>\n                  Top Characters\n                </span>\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/creator/rooms\">\n                <span class=\"valign-wrapper\">\n                  <span class=\"iconspacing valign-wrapper\">\n                    <EditIcon size=\"18\" />\n                  </span>\n                  Creator\n                </span>\n              </NavLink>\n            </li>\n          {/if}\n          <li>\n            <NavLink to=\"signup\">News</NavLink>\n          </li>\n          <UserMenu />\n        </ul>\n      </div>\n\n      {#if $subMenu.active}\n        <MediaQuery query=\"(max-width: 1280px)\" let:matches>\n          {#if matches}\n            <div class=\"nav-content\">\n              <ul class=\"tabs tabs-transparent\">\n                {#each $subMenu.entries as entry}\n                  <li class=\"tab\">\n                    <NavLink to=\"{entry.nav}\">{entry.name}</NavLink>\n                  </li>\n                {/each}\n              </ul>\n            </div>\n          {:else}\n            <div class=\"nav-content container\">\n              <ul class=\"tabs tabs-transparent\">\n                {#each $subMenu.entries as entry}\n                  <li class=\"tab\">\n                    <NavLink to=\"{entry.nav}\">{entry.name}</NavLink>\n                  </li>\n                {/each}\n              </ul>\n            </div>\n          {/if}\n        </MediaQuery>\n      {/if}\n\n    </nav>\n\n    <MediaQuery query=\"(min-width: 1281px)\" let:matches>\n      {#if matches}\n        <main class=\"container\">\n          <AppContent />\n\n        </main>\n      {:else}\n        <main>\n          <AppContent />\n        </main>\n      {/if}\n    </MediaQuery>\n\n  </Router>\n</div>\n",
    "<style>\n\n.bg {\n    background: #2f2f2f !important;\n}\n\n</style>\n\n<script>\n\n</script>\n\n<h4>Credits</h4>\n<ul class=\"collection\">\n  <li class=\"collection-item bg\">\n    <a href=\"https://opengameart.org/content/32x32-fantasy-portrait-set\">\n      https://opengameart.org/content/32x32-fantasy-portrait-set\n    </a>\n    by CobraLad\n  </li>\n</ul>\n",
    "<style>\n  .content {\n    display: grid;\n    grid-template-columns: 20% 80%;\n    grid-column-gap: 10px;\n  }\n\n  input {\n    color: #eee;\n  }\n  #refid {\n    color: #999;\n  }\n  #refidlabel {\n    color: #999;\n  }\n</style>\n\n<script>\n  import { writable } from \"svelte/store\";\n  import { onMount } from \"svelte\";\n\n  import { createAuth, getAuth } from \"./auth.js\";\n  import axios from \"axios\";\n  import { onInterval } from \"./utils.js\";\n\n  import { getUser, updateUser } from \"./api/user.js\";\n\n  let user = writable({});\n\n  const {\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    authToken,\n    authError,\n    userInfo,\n  } = getAuth();\n\n  $: state = {\n    isLoading: $isLoading,\n    isAuthenticated: $isAuthenticated,\n    authError: $authError,\n    userInfo: $userInfo ? $userInfo.name : null,\n    authToken: $authToken.slice(0, 20),\n    user,\n  };\n\n  $: {\n    getUser(\n      $authToken,\n      (u) => {\n        user.set(u);\n      },\n      (err) => console.log(err)\n    );\n  }\n\n  async function handleSubmit(event) {\n    if ($isAuthenticated) {\n      updateUser($authToken, $user, () => {\n        console.log(\"user updated \");\n      });\n    }\n  }\n</script>\n\n<div class=\"row\">\n  <h3>Your Account data</h3>\n  <form class=\"col s12\">\n\n    <div class=\"row\">\n      <div class=\"input-field col s12\">\n        <input bind:value=\"{$user.refid}\" id=\"refid\" type=\"text\" disabled />\n        <label id=\"refidlabel\" for=\"refid\" class=\"active\">Reference ID</label>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-field col s12\">\n        <input\n          bind:value=\"{$user.name}\"\n          id=\"username\"\n          type=\"text\"\n          class=\"validate\"\n        />\n        <label for=\"username\" class=\"active\">Name</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"input-field col s12\">\n        <input\n          bind:value=\"{$user.nickname}\"\n          id=\"usernickname\"\n          type=\"text\"\n          class=\"validate\"\n        />\n        <label for=\"usernickname\" class=\"active\">Nickname</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"input-field col s12\">\n        <input\n          bind:value=\"{$user.email}\"\n          id=\"useremail\"\n          type=\"text\"\n          class=\"validate\"\n        />\n        <label for=\"useremail\" class=\"active\">E-Mail</label>\n      </div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"input-field col s12\">\n      <button\n        class=\"btn waves-effect waves-light\"\n        on:click=\"{() => handleSubmit()}\"\n      >\n        Submit\n        <i class=\"material-icons right\">send</i>\n      </button>\n    </div>\n  </div>\n</div>\n",
    "<style>\n  .userbutton {\n    margin-right: 1em;\n  }\n\n  .btn-small {\n    color: #eee;\n  }\n\n  .img {\n    width: 42px;\n  }\n</style>\n\n<script>\n  import { onMount } from \"svelte\";\n  import { UserIcon } from \"svelte-feather-icons\";\n\n  import { getAuth } from \"./auth.js\";\n  import { getUser, updateUser } from \"./api/user.js\";\n\n  const {\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    authToken,\n    authError,\n    userInfo,\n  } = getAuth();\n\n  async function loadUserData() {\n    getUser(\n      $authToken,\n      (u) => {\n        user.set(u);\n      },\n      (err) => console.log(err)\n    );\n  }\n\n  async function signup() {\n    await login();\n\n    if ($isAuthenticated) {\n      await loadUserData();\n    }\n  }\n\n  onMount(() => {\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var elems = document.querySelectorAll(\".dropdown-trigger\");\n      var instances = M.Dropdown.init(elems);\n    });\n  });\n</script>\n\n<!-- Dropdown Structure -->\n<ul id=\"dropdown1\" class=\"dropdown-content\">\n  <li>\n    <a href=\"#!\" on:click=\"{() => logout()}\">logout</a>\n  </li>\n  <li>\n    <a href=\"account\">profile</a>\n  </li>\n</ul>\n\n{#if $isLoading}\n  <li class=\"right-align\">...</li>\n{:else if !$isAuthenticated}\n  <li class=\"right-align\">\n    <p on:click=\"{() => signup()}\" class=\"btn-small userbutton green\">Signup</p>\n  </li>\n  <li class=\"right-align\">\n    <button on:click=\"{() => login()}\" class=\"btn-small userbutton green\">\n      Log in\n    </button>\n  </li>\n{/if}\n<li>\n\n  <a class=\"dropdown-trigger\" href=\"#\" data-target=\"dropdown1\">\n    <span class=\"valign-wrapper\">\n\n      {#if $isAuthenticated}\n        <img src=\"{$userInfo.picture}\" alt=\"\" class=\"circle img \" />\n        <i class=\"material-icons left\">arrow_drop_down</i>\n      {/if}\n    </span>\n\n  </a>\n</li>\n",
    "<style>\n  .loginText {\n    color: greenyellow;\n  }\n\n  .modal {\n    background-color: darkslategrey;\n  }\n</style>\n\n<script>\n  import Sprites from \"./game/Sprites.svelte\";\n  import NavLink from \"./components/NavLink.svelte\";\n  import CharacterCreator from \"./characters/CharacterCreator.svelte\";\n  import { onMount } from \"svelte\";\n\n  import { createAuth, getAuth } from \"./auth.js\";\n  import axios from \"axios\";\n  import { onInterval } from \"./utils.js\";\n  import { getUser } from \"./api/user.js\";\n  import { writable } from \"svelte/store\";\n\n  const nickname = writable(\"stranger\");\n  let loaded = false;\n\n  const {\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    authToken,\n    authError,\n    userInfo,\n  } = getAuth();\n\n  $: state = {\n    isLoading: $isLoading,\n    isAuthenticated: $isAuthenticated,\n    authError: $authError,\n    userInfo: $userInfo ? $userInfo.name : null,\n    authToken: $authToken.slice(0, 20),\n    nickname: $nickname,\n  };\n\n  $: {\n    if (!loaded && !$isLoading && $isAuthenticated) {\n      loaded = true;\n      getUser(\n        $authToken,\n        (user) => {\n          nickname.set(user.nickname);\n        },\n        (err) => console.log(err)\n      );\n    }\n  }\n\n  const loadUser = async () => {};\n\n  onMount(async () => {\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var elems = document.querySelectorAll(\".modal\");\n      var instances = M.Modal.init(elems, {});\n    });\n\n    await loadUser();\n  });\n</script>\n\n<div class=\"left\">\n  {#if $isAuthenticated}\n    <div>\n\n      <h5>Welcome back {$nickname}</h5>\n\n      <div>\n\n        <NavLink to=\"/play\">Start playing</NavLink>\n        or try to create some\n        <NavLink to=\"/creator\">own content.</NavLink>\n      </div>\n\n      <div>\n        <p>\n          <a class=\"modal-trigger\" href=\"#modal1\">Create a new Character</a>\n        </p>\n\n      </div>\n    </div>\n  {:else if !$isAuthenticated}\n    <div>\n      <h4>Welcome Stranger</h4>\n      <p>\n        Please\n        <a href=\"/login\" class=\"loginText\">log</a>\n        in or\n        <a href=\"/signup\" class=\"loginText\">signup</a>\n      </p>\n    </div>\n  {/if}\n\n  <div>\n    <h5>TalesMUD</h5>\n    <p>\n      TalesMUD is a MUD/MUX game engine/game development platform. Using\n      TalesMud you can create your own MUD server, define your game content and\n      either use the existing web client or build a new one from scratch.\n    </p>\n    <p>\n      This is still a very early version with many more features planned. As\n      development progresses you can expect several updates to the developer\n      sandbox version running on this site.\n    </p>\n    Implemented\n    <ul>\n      <li>- Character creation</li>\n      <li>- Room creation, movement between rooms</li>\n    </ul>\n    Planned\n    <ul>\n      <li>- Items, Inventory Management</li>\n      <li>- NPCs, Enemies and Dialogs</li>\n      <li>- Combat System</li>\n      <li>- Quest System</li>\n    </ul>\n    <p>\n      Head over to\n      <NavLink to=\"/play\">play</NavLink>\n      create a character and try out the current set of commands by typing\n      [help]. List of all global commands:\n    </p>\n    <ul>\n\n      <li>[shrug] shrug emote</li>\n      <li>[sc, selectcharacter] select a character, use: sc [charactername]</li>\n      <li>[lc, listcharacters] list all your characters</li>\n      <li>[h, help] are you really asking?</li>\n      <li>[who] list all online players</li>\n      <li>[inventory, i] Display your inventory</li>\n      <li>[newcharacter, nc] Createa new character</li>\n      <li>[scream] scream through the room</li>\n    </ul>\n\n  </div>\n\n  <div>\n    <h5>News</h5>\n    <ul>\n      <li>\n        12.06.2020 - First minimalistic version live supporting room creation,\n        character creation (template picks)\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h5>Credits</h5>\n    The application uses several assets througout the app and the backend, here\n    is a list of free and licensed art:\n    <NavLink to=\"/credits\">See Credits</NavLink>\n\n  </div>\n\n  <CharacterCreator />\n\n</div>\n",
    "<style>\n  .modal {\n    background-color: darkslategrey;\n  }\n\n  input {\n    color: #eee;\n  }\n</style>\n\n<script>\n  import CharacterTemplate from \"./CharacterTemplate.svelte\";\n  import { onMount } from \"svelte\";\n  import { writable } from \"svelte/store\";\n\n  import { createAuth, getAuth } from \"../auth.js\";\n  import axios from \"axios\";\n  import { onInterval } from \"../utils.js\";\n  import { getCharacterTemplates, createNewCharacter } from \"../api/characters\";\n\n  let data = [];\n  let topTen = [];\n\n  const store = writable({\n    templateSelected: false,\n    selectedTemplate: 0,\n    character: {},\n    name: \"unnamed\",\n    description: \"Describe your new character\",\n  });\n\n  const {\n    isLoading,\n    isAuthenticated,\n    login,\n    logout,\n    authToken,\n    authError,\n    userInfo,\n  } = getAuth();\n\n  $: state = {\n    isLoading: $isLoading,\n    isAuthenticated: $isAuthenticated,\n    authError: $authError,\n    userInfo: $userInfo ? $userInfo.name : null,\n    authToken: $authToken.slice(0, 20),\n  };\n\n  const create = () => {\n    const createDTO = {\n      name: $store.name,\n      description: $store.description,\n      templateId: $store.selectedTemplate,\n    };\n\n    createNewCharacter(\n      $authToken,\n      createDTO,\n      (character) => console.log(\"Created character \" + character.id),\n      (err) => console.log(err)\n    );\n  };\n\n  onMount(async () => {\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var elems = document.querySelectorAll(\".modal\");\n      var instances = M.Modal.init(elems, {});\n    });\n\n    getCharacterTemplates(\n      (result) => {\n        templates.set(result);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  });\n\n  const templates = writable([]);\n</script>\n\n<!-- Modal Structure -->\n<div id=\"modal1\" class=\"modal\">\n  <div class=\"modal-content\">\n    <h4>Create new Character</h4>\n\n    {#if !$store.templateSelected}\n      <p>\n        Select a template which fits you most, you can change starting\n        attributes as well\n      </p>\n      <div class=\"row\">\n        {#each $templates as character}\n          <div class=\"col s4\">\n            <CharacterTemplate\n              name=\"{character.name}\"\n              description=\"{character.description}\"\n              created=\"{character.created}\"\n              attributes=\"{character.attributes}\"\n              templateId=\"{character.templateId}\"\n              callback=\"{(id) => {\n                store.update((state) => {\n                  state.templateSelected = true;\n                  state.selectedTemplate = id;\n                  state.character = character;\n                  state.name = character.name;\n                  state.description = character.description;\n                  return state;\n                });\n              }}\"\n            />\n          </div>\n        {/each}\n      </div>\n    {/if}\n\n    <div class=\"row\">\n      {#if $store.templateSelected}\n        <div class=\"col s4\">\n          <CharacterTemplate\n            name=\"{$store.name}\"\n            description=\"{$store.description}\"\n            created=\"{$store.character.created}\"\n            attributes=\"{$store.character.attributes}\"\n          />\n        </div>\n      {/if}\n      <div class=\"col s8\">\n\n        <div class=\"input-field\">\n          <input\n            bind:value=\"{$store.name}\"\n            id=\"name\"\n            type=\"text\"\n            class=\"validate\"\n          />\n          <label for=\"name\" class=\"active\">Name</label>\n        </div>\n\n        <div class=\"input-field\">\n          <input\n            bind:value=\"{$store.description}\"\n            id=\"description\"\n            type=\"text\"\n          />\n          <label for=\"description\" class=\"active\">Description</label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      href=\"#!\"\n      class=\"modal-close waves-effect waves-red btn\"      \n    >\n      Cancel\n    </button>\n    <button\n      href=\"#!\"\n      class=\"modal-close waves-effect waves-green btn\"\n      on:click=\"{create}\"\n    >\n      Create\n    </button>\n  </div>\n</div>\n",
    "<style>\n  .img {\n    width: 96px;\n    height: 96px;\n    margin: 1em;\n    image-rendering: pixelated;\n  }\n  .characterCard {\n    width: 250px;\n    height: 300px;\n    margin: 2em;\n  }\n  .card-title {\n    font-size: 10px;\n  }\n</style>\n\n<script>\n  import MediaQuery from \"svelte-media-query\";\n  import { fade } from \"svelte/transition\";\n  import moment from \"moment\";\n\n  export let name;\n  export let level;\n  export let cclass;\n  export let xp;\n\n  function formattedDate() {\n    return moment(created).format(\"MMMM Do YYYY, h:mm:ss a\");\n  }\n\n  function avatar() {\n    let num = 1 + Math.abs(name.hashCode() % 12);\n    return \"img/avatars/\" + num + \"p.png\";\n  }\n</script>\n\n<div class=\"card blue-grey darken-2 hoverable characterCard center-align\">\n  <div class=\"card-content white-text\">\n\n    <img src=\"{avatar()}\" alt=\"\" class=\"circle img z-depth-2\" />\n\n    <span class=\"card-title\">{xp} XP</span>\n    <span class=\"card-title\">LVL {level} - {cclass.name}</span>\n    <span class=\"card-content\">{name}</span>\n  </div>\n</div>\n",
    "<style>\n  .img {\n    width: 96px;\n    height: 96px;\n    margin: 1em;\n    image-rendering: pixelated;\n  }\n  .characterCard {\n    width: 250px;\n  }\n\n  td {\n    padding: 2px;\n  }\n</style>\n\n<script>\n  import MediaQuery from \"svelte-media-query\";\n  import { fade } from \"svelte/transition\";\n  import moment from \"moment\";\n\n  export let name;\n  export let description;\n  export let created;\n  export let level;\n  export let xp;\n  export let templateId;\n  export let attributes;\n  export let callback;\n\n  function formattedDate() {\n    return moment(created).format(\"MMMM Do YYYY, h:mm:ss a\");\n  }\n\n  function avatar() {\n    let num = 1 + Math.abs(name.hashCode()%12)\n    return \"img/avatars/\" + num + \"p.png\";\n  }\n</script>\n\n<div class=\"card cyan darken-3 hoverable characterCard center-align\">\n  <div class=\"card-content white-text\">\n    <img src=\"{avatar()}\" alt=\"\" class=\"circle img\" />\n    <span class=\"card-title\">{name}</span>\n    <span>{description}</span>\n\n  </div>\n  <div class=\"card-content\">\n\n    {#if attributes}\n      <table>\n        <tbody>\n          {#each attributes as attribute}\n            <tr>\n              <td>{attribute.name}</td>\n              <td class=\"right\">{attribute.value}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n      \n    {/if}\n  </div>\n  <div class=\"card-content\">\n    <button\n      class=\"btn green\"\n      on:click=\"{() => {\n        callback(templateId);\n      }}\"\n    >\n      Choose\n    </button>\n  </div>\n\n</div>\n",
    "<style>\n  .collapsible-header {\n    background-color: transparent;\n  }\n  .collapsible-body {\n    padding: 1em;\n    margin: 1em;\n  }\n  label {\n    color: #eee;\n  }\n  input {\n    color: white;\n  }\n  input:disabled {\n    color: white;\n  }\n</style>\n\n<script>\n  export let action;\n  export let deleteAction;\n</script>\n\n<li>\n  <div class=\"collapsible-header\">\n    <div class=\"col s9 left valign-wrapper\">\n      <i class=\"material-icons left-align\">flare</i>\n      {action.name}\n    </div>\n    <div class=\"col s3 right-align\">\n      <button\n        on:click=\"{() => deleteAction(action)}\"\n        class=\"btn-small red align-right\"\n      >\n        Delete Action\n      </button>\n    </div>\n\n  </div>\n\n  <div class=\"collapsible-body\">\n    <div class=\"row\">\n\n      <div class=\"input-field\">\n        <input\n          placeholder=\"Placeholder\"\n          id=\"name-{action.name}\"\n          type=\"text\"\n          bind:value=\"{action.name}\"\n        />\n        <label for=\"name-{action.name}\">Name</label>\n\n        <div class=\"input-field\">\n          <input\n            placeholder=\"Placeholder\"\n            id=\"desc-{action.description}\"\n            type=\"text\"\n            bind:value=\"{action.description}\"\n          />\n          <label for=\"desc-{action.description}\">Description</label>\n          <div class=\"input-field\">\n            <input\n              id=\"target-{action.response}\"\n              type=\"text\"\n              bind:value=\"{action.response}\"\n            />\n            <label for=\"target-{action.response}\">Response</label>\n          </div>\n\n          <div class=\"input-field\">\n            <select\n              id=\"autocomplete-input-{action.type}\"\n              bind:value=\"{action.type}\"\n            >\n\n              <option value=\"response\">Respond to Player</option>\n              <option value=\"response_room\">Respond to Room</option>\n              <option value=\"script\">Run Script</option>\n            </select>\n            <label>Type</label>\n          </div>\n\n        </div>\n\n      </div>\n    </div>\n  </div>\n</li>\n",
    "<style>\n  .sidelist {\n    width: 20em;\n  }\n  textarea {\n    color: white;\n    margin-top: 1em;\n  }\n  .search {\n    color: white !important;\n    padding: 0;\n    margin: 0;\n  }\n  .not_stored {\n    border: 1px dashed orange;\n  }\n\n  input {\n    color: white;\n  }\n  :global(input) {\n    color: #fff;\n  }\n  .margininput {\n    margin-left: 0.5em;\n    margin-right: 0.5em;\n  }\n  input:disabled {\n    color: white;\n  }\n  .no-padding {\n    padding: 0;\n  }\n\n  .first_label {\n    transform: translateX(-10px) translateY(-14px) scale(0.8);\n  }\n\n  .btn-small {\n    margin-right: 0.5em;\n    margin-left: 0.5em;\n  }\n\n  .collection-item {\n    color: #333;\n  }\n  .collection {\n    color: #333;\n  }\n\n  .materialize-textarea {\n    border-bottom: none;\n  }\n  .header {\n    font-size: 150%;\n    font-weight: 600;\n  }\n  .active {\n    color: #ccc;\n  }\n  label {\n    color: #00796b;\n  }\n</style>\n\n<script>\n  import ActionEditor from \"./ActionEditor.svelte\";\n  import Toolbar from \"./Toolbar.svelte\";\n  import { createStore } from \"./CRUDEditorStore.js\";\n  import { PlusIcon } from \"svelte-feather-icons\";\n  import { writable } from \"svelte/store\";\n  import { onMount } from \"svelte\";\n  import { createAuth, getAuth } from \"../auth.js\";\n\n  export let config;\n  export let store;\n\n  const { isAuthenticated, authToken } = getAuth();\n\n  $: state = {\n    isAuthenticated: $isAuthenticated,\n    authToken: $authToken.slice(0, 20),\n  };\n\n  const loadData = async (cb) => {\n    if (!$isAuthenticated) return;\n    config.get(\n      $authToken,\n      $store.filters,\n      (all) => {\n        store.setElements(all);\n        if (cb) cb();\n      },\n      (err) => console.log(err)\n    );\n  };\n\n  onMount(async () => {\n    loadData(() => {\n      selectElement($store.elements[0]);\n    });\n  });\n\n  const isDraft = (isnew) => {\n    console.log(\"re.selectedElement.isNew\" + isnew);\n    if (isnew === true) return \"not_stored\";\n    return \"\";\n  };\n\n  const deleteElement = async () => {\n    config.delete(\n      $authToken,\n      $store.selectedElement.id,\n      () => {\n        loadData(() => {\n          if ($store.elements) {\n            store.setSelectedElement($store.elements[0]);\n          }\n        });\n      },\n      () => {\n        console.log(\"create error.\");\n      }\n    );\n  };\n\n  const create = async () => {\n    config.create(\n      $authToken,\n      $store.selectedElement,\n      (element) => {\n        loadData();\n        selectElement(element);\n      },\n      () => {\n        console.log(\"create error.\");\n      }\n    );\n  };\n\n  const selectElement = (element) => {\n    store.setSelectedElement(element, () => {\n      refreshUI();\n    });\n  };\n\n  const addFilter = (filter) => {\n    if (filter.includes(\":\")) {\n      let keyval = filter.split(\":\");\n      store.addFilter(keyval[0], keyval[1]);\n\n      loadData(() => {\n        selectElement($store.elements[0]);\n      });\n    }\n  };\n\n  const removeFilter = (filter) => {\n    if (filter.includes(\":\")) {\n      let keyval = filter.split(\":\");\n      store.removeFilter(keyval[0]);\n\n      loadData(() => {\n        selectElement($store.elements[0]);\n      });\n    }\n  };\n\n  const refreshUI = () => {\n    setTimeout(function () {\n      let chips = document.querySelectorAll(\".chips\");\n      let filters = [];\n\n      // restore current filters\n      $store.filters.forEach((f) => {\n        filters.push({\n          tag: f.key + \":\" + f.val,\n        });\n      });\n\n      M.Chips.init(chips, {\n        data: filters,\n        onChipAdd: (ev, chip) => addFilter(chip.firstChild.nodeValue),\n        onChipDelete: (ev, chip) => removeFilter(chip.firstChild.nodeValue),\n      });\n\n      var elems = document.querySelectorAll(\"select\");\n      M.FormSelect.init(elems, {});\n\n      M.updateTextFields();\n      var elems2 = document.querySelectorAll(\".collapsible\");\n      if (elems2 != undefined) {\n        var instances = M.Collapsible.init(elems2, {});\n      }\n\n      var textareas = document.querySelectorAll(\".materialize-textarea\");\n      textareas.forEach((e) => {\n        M.textareaAutoResize(e);\n      });\n\n      if (config.refreshUI) {\n        config.refreshUI();\n      }\n    }, 50);\n  };\n\n  const update = () => {\n    config.update(\n      $authToken,\n      $store.selectedElement.id,\n      $store.selectedElement,\n      () => {\n        console.log(\"update successful.\");\n        loadData();\n      },\n      () => {\n        console.log(\"update error.\");\n      }\n    );\n  };\n\n  const toolbarConfig = {\n    title: config.title,\n    actions: [\n      {\n        name: null,\n        color: \"\",\n        icon: \"filter_alt\",\n        fnc: () => {\n          store.toggleFilter();\n          refreshUI();\n        },\n      },\n      {\n        name: null,\n        icon: \"add\",\n        color: \"\",\n        fnc: () => config.new(selectElement),\n      },\n      ...config.actions, // add extra ctions\n    ],\n  };\n</script>\n\n<Toolbar toolbar=\"{toolbarConfig}\" />\n\n<div class=\"row\">\n\n  <!-- START: ELEMENT LIST (Master)-->\n  <div class=\"col s3\">\n    <div class=\"collection\">\n      {#each $store.elements as element}\n        <a\n          href=\"#!\"\n          class=\"collection-item blue-grey lighten-5\"\n          on:click=\"{selectElement(element)}\"\n        >\n\n          {#if element && config.badge}\n            <span class=\"new badge\" data-badge-caption=\"\">\n              {config.badge(element)}\n            </span>\n          {/if}\n          {element.name}\n        </a>\n      {/each}\n    </div>\n  </div>\n  <!-- END: ELEMENT LIST -->\n\n  <div class=\"col s9\">\n\n    {#if $store.filterActive}\n      <div class=\"card-panel blue-grey lighten-5\">\n        <div class=\"chips chips-placeholder search\"></div>\n      </div>\n    {/if}\n\n    <!-- START: OBJECT PAGE (Detail)-->\n    {#if $store.selectedElement}\n      <div\n        class=\"card-panel blue-grey darken-3 {isDraft($store.selectedElement.isNew)}\"\n      >\n        {#if $store.selectedElement.isNew}\n          <div class=\"row center-align\" style=\"padding:0; margin-top: -2.6em;\">\n            <div\n              class=\"chip\"\n              style=\"color: #121212; margin: 0; background-color: orange;\n              text-align:center;\"\n            >\n              Not Stored\n            </div>\n          </div>\n        {/if}\n\n        <div class=\"row\">\n          <slot name=\"hero\" />\n          <span class=\"header\">{$store.selectedElement.name}</span>\n\n          {#if $store.selectedElement.isNew}\n            <button\n              on:click=\"{() => create()}\"\n              class=\"waves-effect waves-light btn-small green right\"\n            >\n              Create\n            </button>\n          {:else}\n            <button\n              on:click=\"{() => update()}\"\n              class=\"waves-effect waves-light btn-small green right\"\n            >\n              Update\n            </button>\n            <button\n              on:click=\"{() => deleteElement()}\"\n              class=\"waves-effect waves-light btn-small red right\"\n            >\n              Delete\n            </button>\n          {/if}\n        </div>\n\n        <div class=\"row\">\n          <div class=\"no-padding input-field col s6\">\n            <input\n              placeholder=\"Name\"\n              id=\"itemTemplate_name\"\n              type=\"text\"\n              bind:value=\"{$store.selectedElement.name}\"\n            />\n            <label class=\"first_label\" for=\"itemTemplate_name\">Name</label>\n          </div>\n\n          {#if $store.selectedElement.isNew}\n            <div class=\"input-field col s4\">\n              <input\n                placeholder=\"ID\"\n                id=\"itemTemplate_id\"\n                type=\"text\"\n                bind:value=\"{$store.selectedElement.id}\"\n              />\n              <label class=\"active\" for=\"itemTemplate_id\">ID</label>\n            </div>\n          {:else}\n            <div class=\"input-field col s4\">\n              <input\n                placeholder=\"ID\"\n                id=\"itemTemplate_id\"\n                type=\"text\"\n                bind:value=\"{$store.selectedElement.id}\"\n                disabled\n              />\n              <label class=\"active\" for=\"itemTemplate_id\">ID</label>\n            </div>\n          {/if}\n\n        </div>\n\n        <div class=\"row\">\n          <div class=\"input-field\">\n            <textarea\n              placeholder=\"Description\"\n              id=\"itemTemplate_description\"\n              type=\"text\"\n              class=\"materialize-textarea\"\n              bind:value=\"{$store.selectedElement.description}\"\n            ></textarea>\n            <label class=\"active\" for=\"itemTemplate_description\">\n              Description\n            </label>\n          </div>\n        </div>\n\n        {#if config.hideDetails == undefined || !config.hideDetails}\n          <div class=\"row\">\n            <div class=\"input-field\">\n              <textarea\n                placeholder=\"Details\"\n                id=\"itemTemplate_detail\"\n                type=\"text\"\n                class=\"materialize-textarea\"\n                bind:value=\"{$store.selectedElement.detail}\"\n              ></textarea>\n              <label class=\"active\" for=\"itemTemplate_detail\">\n                Detail (look)\n              </label>\n            </div>\n          </div>\n        {/if}\n\n        <slot name=\"content\" />\n      </div>\n\n      <slot name=\"extensions\" />\n    {/if}\n  </div>\n\n</div>\n",
    "<style>\n  .collapsible-header {\n    background-color: transparent;\n  }\n  .collapsible-body {\n    padding: 1em;\n    margin: 1em;\n  }\n  label {\n    color: #eee;\n  }\n  input {\n    color: white;\n  }\n  input:disabled {\n    color: white;\n  }\n</style>\n\n<script>\n  export let exit;\n  export let deleteExit;\n</script>\n\n<li>\n  <div class=\"collapsible-header\">\n    <div class=\"col s9 left valign-wrapper\">\n      <i class=\"material-icons left-align\">exit_to_app</i>\n      {exit.name}\n    </div>\n    <div class=\"col s3 right-align\">\n      <button\n        on:click=\"{() => deleteExit(exit)}\"\n        class=\"btn-small red align-right\"\n      >\n        Delete Exit\n      </button>\n    </div>\n\n  </div>\n\n  <div class=\"collapsible-body\">\n    <div class=\"row\">\n\n      <label>\n        <input type=\"checkbox\" bind:checked=\"{exit.hidden}\" />\n        <span>Hidden</span>\n      </label>\n\n    </div>\n\n    <div class=\"row\">\n\n      <div class=\"input-field\">\n        <input\n          placeholder=\"Placeholder\"\n          id=\"name-{exit.name}\"\n          type=\"text\"\n          bind:value=\"{exit.name}\"\n        />\n        <label for=\"name-{exit.name}\">Name</label>\n\n        <div class=\"input-field\">\n          <input\n            placeholder=\"Placeholder\"\n            id=\"desc-{exit.description}\"\n            type=\"text\"\n            bind:value=\"{exit.description}\"\n          />\n          <label for=\"desc-{exit.description}\">Description</label>\n          <div class=\"input-field\">\n            <input\n              id=\"target-{exit.target}\"\n              type=\"text\"\n              bind:value=\"{exit.target}\"\n            />\n            <label for=\"target-{exit.target}\">Target Room</label>\n          </div>\n          <div class=\"input-field\">\n            <input\n              type=\"text\"\n              id=\"autocomplete-input-{exit.name}\"\n              class=\"autocomplete\"\n            />\n            <label for=\"autocomplete-input\">Target Room</label>\n          </div>\n\n        </div>\n\n      </div>\n    </div>\n  </div>\n</li>\n",
    "<style>\n  ul {\n    display: flex;\n    justify-content: flex-end;\n    flex-direction: row;\n    align-items: center;\n    /* width: 100%; */\n\n    padding: 15px;\n  }\n\n  ul li {\n    display: inline-block;\n    list-style: none;\n    color: #eee;\n  }\n\n  .btn-flat {\n    border: 1px #aaaaaa88 solid;\n    color: #eee;\n    border-radius: 4px;\n    margin: 5px;\n  }\n\n  .header {\n    font-weight: 500;\n    font-size: 200%;\n  }\n\n  .header-small {\n    font-weight: 300;\n    font-size: 120%;\n  }\n\n  ul li:first-child {\n    margin-right: auto;\n  }\n</style>\n\n<script>\n  export let toolbar = {\n    title: \"TODO\",\n    small: false,\n    actions: [\n      {\n        name: \"Change Me\",\n        color: \"green\",\n        fnc: () => console.log(\"ACTION\"),\n      },\n    ],\n  };\n\n  const headerClass = () => {\n    if (toolbar.small) {\n      return \"header-small\";\n    }\n    return \"header\";\n  };\n\n  const headerDiv = () => {\n    if (toolbar.small) {\n      return \"\";\n    }\n    return \"row\";\n  };\n</script>\n\n\n<div class=\"{headerDiv()}\">\n  <ul>\n    <li class=\"{headerClass()}\">{toolbar.title}</li>\n    {#each toolbar.actions as action}\n      <li>\n        <button class=\"btn-flat\" on:click=\"{action.fnc()}\">\n\n          {#if action.icon && action.name}\n            <i class=\"material-icons left\">{action.icon}</i>\n          {:else if action.icon}\n            <i class=\"material-icons center\">{action.icon}</i>\n          {/if}\n          {#if action.name}{action.name}{/if}\n\n        </button>\n      </li>\n    {/each}\n\n  </ul>\n</div>\n",
    "<style>\n  #terminalWindow {\n    width: 100%;\n\n    padding: 1em;\n    background: #00000088;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #ffffff33;\n    border-radius: 0.5em;\n\n    float: left;\n  }\n  #terminal {\n    background: #000;\n  }\n  #terminal2 {\n    background: #000;\n  }\n  #inventory {\n    float: right;\n    width: 300px;\n    background: #00000088;\n    padding: 1em;\n    border-width: 0px;\n    border-style: solid;\n    border-color: #5ece54;\n    border-radius: 0.5em;\n    margin-top: 10em;\n  }\n  #inv_content {\n    border-width: 0px;\n  }\n  #inv_content li {\n    background: #000000cc;\n    margin-bottom: 0.5em;\n    padding: 1em;\n  }\n</style>\n\n<script>\n  import MediaQuery from \"../MediaQuery.svelte\";\n\n  import CharacterCreator from \"./../characters/CharacterCreator.svelte\";\n  import \"../../node_modules/xterm/css/xterm.css\";\n  import { onMount, onDestroy } from \"svelte\";\n  import { createAuth, getAuth } from \"../auth.js\";\n  import axios from \"axios\";\n  import xterm from \"xterm\";\n  import LocalEchoController from \"./echo/LocalEchoController\";\n  import fit from \"xterm-addon-fit\";\n  import { createClient, getClient } from \"./Client\";\n  import { wsbackend } from \"../api/base.js\";\n  import UserMenu from \"../UserMenu.svelte\";\n\n  let client;\n  let term;\n  let ws;\n\n  const { isAuthenticated, authToken } = getAuth();\n  $: state = {\n    isAuthenticated: $isAuthenticated,\n    authToken: $authToken.slice(0, 20),\n  };\n\n  $: {\n    if (client && !ws) {\n      // connect to websocket server\n      const url = wsbackend + \"?access_token=\";\n      ws = new WebSocket(url + $authToken);\n      client.setWSClient(ws);\n    }\n  }\n\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  function readLine(localEcho, term) {\n    localEcho\n      .read(\"~$ \")\n      .then((input) => {\n        client.onInput(input);\n        readLine(localEcho, term);\n      })\n      .catch((error) => console.log(`Error reading: ${error}`));\n  }\n\n  const createRenderer = (term, localEcho) => {\n    return (data) => {\n      localEcho.clearInput();\n      term.writeln(data);\n    };\n  };\n\n  const characterCreator = () => {\n    console.log(\"CREATE CHARACTER\");\n\n    var Modalelem = document.querySelector(\".modal\");\n    var instance = M.Modal.init(Modalelem);\n    instance.open();\n  };\n\n  async function setupTerminal() {\n    term = new xterm.Terminal();\n    var fitAddon = new fit.FitAddon();\n    term.loadAddon(fitAddon);\n    term.setOption(\"cursorBlink\", true);\n    term.setOption(\"convertEol\", true);\n\n    term.open(document.getElementById(\"terminal\"));\n    fitAddon.fit();\n\n    const localEcho = new LocalEchoController(term);\n    localEcho.addAutocompleteHandler(autocompleteCommonCommands);\n    client = createClient(createRenderer(term, localEcho), characterCreator);\n\n    readLine(localEcho, term);\n  }\n\n  onMount(async () => {\n    // change global background\n    document.body.style.backgroundImage = \"url('/bg.jpg')\";\n    document.body.style.backdropFilter =\n      \"blur(10px) saturate(30%) brightness(50%)\";\n\n    var nav = document.querySelector(\"nav\");\n    if (nav) {\n      nav.style.backgroundColor = \"#00000000\";\n      setupTerminal();\n    }\n  });\n\n  onDestroy(async () => {\n    // change global background\n    document.body.style.backgroundImage = \"\";\n    document.body.style.backdropFilter = \"\";\n\n    var nav = document.querySelector(\"nav\");\n    if (nav) {\n      nav.style.backgroundColor = \"#00000055\";\n      setupTerminal();\n    }\n  });\n\n  function autocompleteCommonCommands(index, tokens) {\n    if (index == 0) return [\"north\", \"east\", \"south\", \"west\", \"say\"];\n    return [];\n  }\n</script>\n\n<CharacterCreator />\n\n<div id=\"terminalWindow\">\n  <div id=\"terminal\"></div>\n</div>\n",
    "<style>\n  .container {\n    width: 64px !important;\n    height: 64px !important;\n  }\n  .weapon {\n    width: 16px;\n    height: 16px;\n    transform: scale(2) translate(4px, 4px);\n    background: url(\"img/items.png\") -32px 0px;\n    image-rendering: pixelated;\n  }\n  .shield {\n    width: 16px;\n    height: 16px;\n    \n\n    background: url(\"img/items.png\") -64px -128px;\n    image-rendering: pixelated;\n  }\n</style>\n\n<script>\n  export let item = \"weapon\";\n</script>\n\n<div class=\"container\">\n  <div class=\"{item}\"></div>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}